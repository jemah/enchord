{
  "name": "smtp-protocol",
  "description": "implements the smtp protocol for clients and servers",
  "version": "0.1.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/node-smtp-protocol.git"
  },
  "main": "index.js",
  "keywords": [
    "email",
    "mail",
    "smtp",
    "client",
    "server"
  ],
  "directories": {
    "lib": ".",
    "example": "example",
    "test": "test"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "dependencies": {
    "event-stream": "0.6.x"
  },
  "devDependencies": {
    "tap": "0.0.x",
    "chunky": "0.0.x",
    "seq": "0.3.x"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "license": "MIT",
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "readme": "smtp-protocol\n=============\n\nImplements the smtp protocol for clients and servers.\n\nThis module does not relay any messages or perform disk I/O by itself.\n\nexamples\n========\n\nserver\n------\n\n``` js\nvar smtp = require('smtp-protocol');\n\nvar server = smtp.createServer(function (req) {\n    req.on('to', function (to, ack) {\n        var domain = to.split('@')[1] || 'localhost';\n        if (domain === 'localhost') ack.accept()\n        else ack.reject()\n    });\n    \n    req.on('message', function (stream, ack) {\n        console.log('from: ' + req.from);\n        console.log('to: ' + req.to);\n        \n        stream.pipe(process.stdout, { end : false });\n        ack.accept();\n    });\n});\n\nserver.listen(9025);\n```\n\nusage:\n\n```\n$ node example/server.js \n```\n\nelsewhere:\n\n```\n$ nc localhost 9025\n250 beep\nhelo\n250 \nmail from: <beep@localhost>\n250 \nrcpt to: <boop@localhost>\n250 \ndata\n354 \nBeep boop.\nI am a computer.\n.\n250 \nquit\n221 Bye!\n```\n\nmeanwhile:\n\n```\nfrom: beep@localhost\nto: boop@localhost\nBeep boop.\nI am a computer.\n```\n\nclient\n------\n\n``` js\nvar smtp = require('../');\nvar seq = require('seq');\nvar fs = require('fs');\n\nsmtp.connect('localhost', 25, function (mail) {\n    seq()\n        .seq_(function (next) {\n            mail.on('greeting', function (code, lines) {\n                console.dir(lines);\n                next();\n            });\n        })\n        .seq(function (next) {\n            mail.helo('localhost', this.into('helo'));\n        })\n        .seq(function () {\n            mail.from('substack', this.into('from'));\n        })\n        .seq(function () {\n            mail.to('root', this.into('to'));\n        })\n        .seq(function () {\n            mail.data(this.into('data'))\n        })\n        .seq(function () {\n            mail.message(fs.createReadStream('/etc/issue'), this.into('message'));\n        })\n        .seq(function () {\n            mail.quit(this.into('quit'));\n        })\n        .seq(function () {\n            console.dir(this.vars);\n        })\n    ;\n});\n```\n\noutput:\n\n```\n$ node example/client.js\n[ 'beep ESMTP Postfix (Ubuntu)' ]\n{ helo: 250,\n  from: 250,\n  to: 250,\n  data: 354,\n  message: 250,\n  quit: 221 }\n```\n\nserver methods\n==============\n\nvar smtp = require('smtp-protocol')\n\nsmtp.createServer(domain=os.hostname(), cb)\n-------------------------------------------\n\nReturn a new `net.Server` so you can `.listen()` on a port.\n\n`cb(req)` fires for new connection. See the \"requests\" section below.\n\nserver requests\n===============\n\nevents\n------\n\nEvery event that can \n\nEvery acknowledgeable event except \"message\" will implicitly call `ack.accept()`\nif no listeners are registered.\n\nIf there are any listeners for an acknowledgeable event, exactly one listener\nMUST call either `ack.accept()` or `ack.reject()`.\n\n### 'greeting', cmd, ack\n\nEmitted when `HELO`, `EHLO`, or `LHLO` commands are received.\n\nRead the name of the command with `cmd.greeting`.\nRead the optional domain parameter with `cmd.domain`.\n\n### 'from', from, ack\n\nEmitted when the `MAIL FROM:` command is received.\n\n`from` is the email address of the sender as a string.\n\n### 'to', to, ack\n\nEmitted when the `RCPT TO:` command is received.\n\n`to` is the email address of the recipient as a string.\n\n### 'message', stream, ack\n\nEmitted when the `DATA` command is received.\n\nIf the message request is accepted, the message body will be streamed through\n`stream`.\n\nThis event has no implicit `ack.accept()` when there are no listeners.\n\n### 'received', ack\n\nEmitted when the body after the `DATA` command finishes.\n\n### 'reset'\n\nEmitted when the connection is reset from a `RSET` command.\n\n### 'quit'\n\nEmitted when the connection is closed from a `QUIT` command.\n\nproperties\n----------\n\n### req.from\n\nThe email address of the sender as a string.\n\n### req.fromExt\n\nExtended sender data if sent as a string.\n\n### req.to\n\nThe email address of the recipient as a string.\n\n### req.toExt\n\nExtended recipient data if sent as a string.\n\n### req.greeting\n\nThe greeting command. One of `'helo'`, `'ehlo'`, or `'lhlo'`.\n\n### req.domain\n\nThe domain specified in the greeting.\n\nserver acknowledgements\n=======================\n\nMany request events have a trailing `ack` parameter.\n\nIf there are any listeners for an acknowledgeable event, exactly one listener\nMUST call either `ack.accept()` or `ack.reject()`.\n\nConsult [this handy list of SMTP codes](http://www.greenend.org.uk/rjk/2000/05/21/smtp-replies.html#SEND)\nfor which codes to use in acknowledgement responses.\n\nack.accept(code=250, message)\n-----------------------------\n\nAccept the command. Internal staged state modifications from the command are executed.\n\nack.reject(code, message)\n-------------------------\n\nReject the command. Any staged state modifications from the command are discarded.\n\nclient methods\n==============\n\nFor all `client` methods, `cb(err, code, lines)` fires with the server response.\n\nvar stream = smtp.connect(host='localhost', port=25, cb)\n--------------------------------------------------------\n\nCreate a new SMTP client connection.\n\n`host`, `port`, and `cb` are detected by their types in the arguments array so\nthey may be in any order.\n\nYou can use unix sockets by supplying a string argument that matches `/^[.\\/]/`.\n\n`cb(client)` fires when the connection is ready.\n\nclient.helo(domain, cb)\n-----------------------\n\nGreet the server with the `domain` string.\n\n`cb(err, code, lines)` fires with the server response.\n\nclient.from(addr, ext=undefined, cb)\n------------------------------------\n\nSet the sender to the email address `addr` with optional extension data `ext`.\n\n`cb(err, code, lines)` fires with the server response.\n\nclient.to(addr, ext=undefined, cb)\n----------------------------------\n\nSet the recipient to the email address `addr` with optional extension data `ext`.\n\n`cb(err, code, lines)` fires with the server response.\n\nclient.data(cb)\n---------------\n\nTell the server that we are about to transmit data.\n\n`cb(err, code, lines)` fires with the server response.\n\nclient.message(stream, cb)\n--------------------------\n\nWrite a message body from `stream` to the server.\n\n`cb(err, code, lines)` fires with the server response.\n\nclient.quit(cb)\n---------------\n\nAsk the server to sever the connection.\n\n`cb(err, code, lines)` fires with the server response.\n\nclient.reset(cb)\n----------------\n\nAsk the server to reset the connection.\n\n`cb(err, code, lines)` fires with the server response.\n\nclient events\n=============\n\n'greeting', code, lines\n-----------------------\n\nFired when the stream initializes. This should be the first message that the\nserver sends.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n    npm install smtp-protocol\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/substack/node-smtp-protocol/issues"
  },
  "homepage": "https://github.com/substack/node-smtp-protocol",
  "_id": "smtp-protocol@0.1.2",
  "dist": {
    "shasum": "9066b36c231b26a6d918e077548ef1f3f53501cd"
  },
  "_from": "smtp-protocol@0.1.x",
  "_resolved": "https://registry.npmjs.org/smtp-protocol/-/smtp-protocol-0.1.2.tgz"
}
